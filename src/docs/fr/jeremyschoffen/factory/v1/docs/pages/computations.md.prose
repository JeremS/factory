◊(require '[fr.jeremyschoffen.prose.alpha.document.lib :as lib])
◊(require '[fr.jeremyschoffen.prose.alpha.out.html.tags :as html :refer (a)])
◊(require '[fr.jeremyschoffen.prose.alpha.out.markdown.tags :as md])
◊(require '[fr.jeremyschoffen.factory.v1.docs.tags :as t])

# Computations

This library provide a way to structure computations similarly to what the
◊|t/graph provides. Lets take the same example as the one ◊|t/graph uses in
its readme to illustrate the use of computations.

We start by declaring the different functions the overall structured computations will use:


◊t/code-s {
  (defn n [{:keys [xs]}]
    (count xs))


  (defn mean [{:keys [xs n]}]
    (/ (reduce + xs)
       n))


  (defn mean-square [{:keys [xs n]}]
    (/ (transduce (map #(* % %))
                  +
                  0
                  xs)
       n))


  (defn variance [{:keys [m m2]}]
    (- m2 (* m m)))
}


We then express the computation with the following:


◊t/code-s {
(require '[fr.jeremyschoffen.factory.v1.computations.basic-runner :as r :refer (c values)])
}
◊t/code-s {
(def stats-config
  {:xs [1 2 3 6] ; inputs are part of the config
   :n (c n :xs)
   :m (c mean :xs :n)
   :m2 (c mean-square :xs :n)
   :v (c variance :m :m2)})
}


We can then execute this config with:

◊t/code {
  (r/run stats-config)
}
